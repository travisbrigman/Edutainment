//
//  ContentView.swift
//  Edutainment
//
//  Created by Travis Brigman on 2/4/21.
//  Copyright Â© 2021 Travis Brigman. All rights reserved.
//

import SwiftUI

struct ContentView: View {
    //determines if user is seeing the setup view or game view
    @State private var isGameActive = false
    //the number of muliplication tables the user select. 1 will be the 1's tables, etc.
    @State private var maxTables = 1
    //sets the question picker
    @State private var quantitySelect = 2
    //array of questions generated by startNewGame and questionBuilder
    @State private var gameQuestions = [Question]()
    //answer user enters
    @State private var enteredAnswer = ""
    
    @State private var gameScore = 0
    @State private var questionCount = 0
    
    var questionQuantity = ["5","10","15","20","All"]
    
    //ðŸš¨ðŸš¨ðŸš¨Alert Message Stuff ðŸš¨ðŸš¨ðŸš¨
    @State private var errorTitle = ""
    @State private var errorMessage = ""
    @State private var showingError = false
    
    var body: some View {
        Group{
            ZStack{
                Color(.systemTeal).edgesIgnoringSafeArea(.all)
                
                if !isGameActive {
                    Form {
                        Stepper(value: $maxTables, in: 1...12, step: 1) {
                            Text("Up to the \(maxTables)'s times tables")
                        }
                        Section(header: Text("How many questions do you want?")){
                            Picker("Question Picker", selection: $quantitySelect) {
                                ForEach(0 ..< questionQuantity.count) {
                                    Text("\(self.questionQuantity[$0])")
                                }
                            }
                            .pickerStyle(SegmentedPickerStyle())
                            
                            Button ( action:{
                                self.isGameActive.toggle()
                                self.startNewGame()
                            }) {
                                ZStack{
                                    Image("greenButton")
                                    Text("Start Game")
                                        .foregroundColor(.white)
                                }
                                
                            }
                            
                        }
                        .padding()
                    }
                    
                } else {
                    VStack {
                        Text("\(gameQuestions[questionCount].equation )")
                            .font(.largeTitle)
                        Text("Question: \(questionCount)")
                        Text("Score: \(gameScore)")
                        TextField("Answer:", text: $enteredAnswer, onCommit: checkAnswer)
                            .keyboardType(.numberPad)
                        Spacer()
                    }
                    .padding()
                    
                }
            }
            .alert(isPresented: $showingError){
                .init(title: Text(errorTitle), message: Text(errorMessage), dismissButton: .default(Text("OK")))
            }
        }
    }
    
    func checkAnswer() {
        
        if gameQuestions[questionCount].answer == Int(enteredAnswer) {
            gameScore += 1
        }
        loadNextQuestion()
    }
    func loadNextQuestion() {
        if questionCount + 1 < gameQuestions.count {
            questionCount += 1
        } else {
            showingError.toggle()
            errorTitle = "you finished!"
            errorMessage = "you got \(gameScore) out of \(gameQuestions.count) questions right!"
            resetGame()
        }
    }
    
    func resetGame() {
        questionCount = 0
        gameScore = 0
        isGameActive = false
    }
    
    //the number we are passing in here for maxQuestions is acutally a string typecast from the array questionQuantity. if a user selected "All", the app will probably crash.
    func startNewGame() {
        gameQuestions = questionBuilder(tableNumbers: maxTables, maxQuestions: Int(questionQuantity[quantitySelect]) ?? 5)
        print(gameQuestions)
    }
}

func questionBuilder(tableNumbers: Int, maxQuestions: Int) -> [Question] {
    var questionArray = [Question]()
    for number in 1...tableNumbers {
        for i in 1...10 {
            questionArray.append(Question(productA: i, productB: number))
        }
    }
    let shortenedArray = questionArray.shuffled().prefix(maxQuestions)
    return Array(shortenedArray)
}


struct Question {
    let productA: Int
    let productB: Int
    var equation: String {
        
        return "\(productA) x \(productB) is ?"
    }
    var answer: Int {
        
        return productA * productB
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}


